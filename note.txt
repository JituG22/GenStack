base on below information create project i know it will go long list of continoue to propt you can plan accordingly step by step we will go through each one and complate it accordingly .

First Create a git repo for our project and get start of each git repo push one by one

# Project Prompt: GenStack – Drag & Drop Node Framework

## 🚀 Goal:
Create a low-code framework called **GenStack** that allows users to drag-and-drop **actionable, customizable nodes** to build applications, APIs, forms, web pages, or even CI/CD pipelines. Each node contains a template (code or logic), validations, inputs, and metadata. Nodes can be saved as templates in MongoDB and reused across multiple projects or organizations. Supports node cloning, validation testing, access control, and template sharing.

---

## 🔧 Functional Overview:

- Node types: Angular component, React component, Node.js API, Python API, Mongo/PostgreSQL query, CICD Step, Form element, etc.
- Node structure: Contains template code, input fields, validations, property schema, categories, UI preview.
- Node features:
  - Predefined and custom node creation
  - Add custom properties and validation
  - Save and reuse templates
  - Clone node as new instance
  - Node test button (code simulation/validation)
- Visual Drag-Drop GUI built with React Flow
- Role-based access for users: Admin, Org Manager, Developer, Viewer
- Admin dashboard for onboarding companies, projects, users
- Each user sees or edits nodes based on role and permission
- Code-generation or reuse from nodes on demand
- CRUD and security-controlled API endpoints (RBAC, token-based auth)

---

## 🏗️ High-Level Architecture:

Frontend: React + TypeScript + Tailwind CSS  
Backend: Node.js + Express (or optionally Python FastAPI)  
Drag & Drop: React Flow  
Database: MongoDB (with Mongoose)  
Auth: JWT + RBAC  
DevOps: GitHub Actions or Jenkins for CI/CD  
Testing: Node-based simulation and validation tests  


Frontend (React)
└── Canvas View (React Flow)
└── Node Component
└── Config Modal (Properties, Code, Validation)
└── Preview & Run Test
Backend (Node.js)
└── Auth API
└── Node CRUD API
└── Template Save/Clone API
└── Role Management API
Database (MongoDB)
└── Nodes Collection
└── Templates
└── Users
└── Roles


---

## 🗂️ Folder Structure

nodeforge/
├── README.md
├── .gitignore
├── package.json
├── /docs
│   ├── architecture.md
│   ├── user-guide.md
│   ├── api-spec.md
│   └── node-types.md
├── /frontend
│   ├── /src
│   │   ├── /components
│   │   ├── /pages
│   │   ├── /nodes
│   │   ├── App.tsx
│   │   └── main.tsx
│   └── tailwind.config.js
├── /backend
│   ├── /controllers
│   ├── /routes
│   ├── /models
│   ├── /middleware
│   └── server.ts
├── /scripts
│   ├── seed.js
│   └── setup.js
└── /tests

---

## 📘 README.md Content (For GitHub Copilot Awareness)

GenStack - Drag & Drop Node-based Framework

NodeForge is a visual low-code platform to drag-and-drop nodes that represent UI components, APIs, pipelines, and more.

Features
	•	Drag & Drop Canvas (React Flow)
	•	Node property panel with dynamic fields and validations
	•	Save & reuse node templates
	•	Role-based access control
	•	MongoDB persistence
	•	Real-time node test/run button

Tech Stack

React, TypeScript, Node.js, MongoDB, Tailwind CSS, React Flow

Getting Started
	1.	Clone the repo
	2.	Run npm install
	3.	Start backend with npm run start:backend
	4.	Start frontend with npm run start:frontend

Contributing

Please see /docs/contributing.md

---

## 📄 API Endpoints Plan

- `POST /api/nodes` – Create node  
- `GET /api/nodes/:id` – Get node by ID  
- `GET /api/nodes?project=xyz` – Get all nodes by project  
- `PUT /api/nodes/:id` – Update node  
- `DELETE /api/nodes/:id` – Delete node  
- `POST /api/nodes/:id/clone` – Clone node as instance  
- `POST /api/auth/login` – Login API with JWT  
- `GET /api/user/me` – Get current user + role  
- `POST /api/project/onboard` – Create company/project  
- `POST /api/team/invite` – Add/remove team member  

---

## 📄 GitHub Copilot Prompt Hint File `.copilot.json`

{
“projectName”: “NodeForge”,
“goal”: “Allow users to drag and drop customizable nodes to build apps, APIs, pipelines and reusable templates.”,
“keywords”: [“low-code”, “drag-and-drop”, “react”, “typescript”, “node templates”, “mongodb”, “nodejs api”, “react flow”, “ui builder”, “pipeline builder”],
“mainTech”: [“React”, “React Flow”, “Node.js”, “Express”, “MongoDB”]
}

---

## ✅ Task Breakdown

### Core Modules

#### 🔹 Drag & Drop Editor (React Flow)
- Render canvas with node connectors
- Show node modal for editing
- Allow moving, deleting, cloning nodes

#### 🔹 Node Engine
- Create/edit node schema: properties, validations, categories
- Store template code and placeholders
- Render preview from template + filled values
- Node Test button (simulate logic or return mock)

#### 🔹 Template Manager
- Save node as template
- Clone templates as instances
- Search, import, export templates

#### 🔹 Role-Based Access System
- JWT + Role middleware
- Permission JSON config for frontend + backend
- UI-based access control (RBAC tree)

#### 🔹 Admin Dashboard
- Add company/project/team/user
- Assign/remove permissions
- View project/node usage analytics

#### 🔹 API Layer
- Node CRUD
- Auth endpoints
- Project and team endpoints

---

## 🔐 Security Plan
- Token-based auth (JWT)
- Role-based endpoint and UI permission checks
- Endpoint validation (Zod/Yup/Custom schema validator)
- Node test validation (Code injection protected)
- Template isolation (Instance vs Master)

---

## 🔄 Future Enhancements
- Plugin system for node publishing
- Marketplace for reusable node packs
- LLM integration to auto-fill node templates
- CI/CD integration using GitHub Actions or Jenkins nodes
- Export-to-code option (ZIP/Repo push)

---

## 🔍 Notes for Copilot or LLM:

This project is a **drag-and-drop node-based visual builder** that supports multiple node types and reusable templates. It requires **template injection, dynamic property configuration**, and **runtime code generation**. Think of it like **n8n + Retool + UI Builder**, focused on productivity, security, and developer reusability. Help generate functions for node rendering, schema validation, template code filling, and CRUD operations across backend and frontend.


---

## ✅ Task Breakdown

### Core Modules

#### 🔹 Drag & Drop Editor (React Flow)
- Render canvas with node connectors
- Show node modal for editing
- Allow moving, deleting, cloning nodes

#### 🔹 Node Engine
- Create/edit node schema: properties, validations, categories
- Store template code and placeholders
- Render preview from template + filled values
- Node Test button (simulate logic or return mock)

#### 🔹 Template Manager
- Save node as template
- Clone templates as instances
- Search, import, export templates

#### 🔹 Role-Based Access System
- JWT + Role middleware
- Permission JSON config for frontend + backend
- UI-based access control (RBAC tree)

#### 🔹 Admin Dashboard
- Add company/project/team/user
- Assign/remove permissions
- View project/node usage analytics

#### 🔹 API Layer
- Node CRUD
- Auth endpoints
- Project and team endpoints

---

## 🔐 Security Plan
- Token-based auth (JWT)
- Role-based endpoint and UI permission checks
- Endpoint validation (Zod/Yup/Custom schema validator)
- Node test validation (Code injection protected)
- Template isolation (Instance vs Master)

---

## 🔄 Future Enhancements
- Plugin system for node publishing
- Marketplace for reusable node packs
- LLM integration to auto-fill node templates
- CI/CD integration using GitHub Actions or Jenkins nodes
- Export-to-code option (ZIP/Repo push)

---

## 🔍 Notes for Copilot or LLM:

This project is a **drag-and-drop node-based visual builder** that supports multiple node types and reusable templates. It requires **template injection, dynamic property configuration**, and **runtime code generation**. Think of it like **n8n + Retool + UI Builder**, focused on productivity, security, and developer reusability. Help generate functions for node rendering, schema validation, template code filling, and CRUD operations across backend and frontend.


